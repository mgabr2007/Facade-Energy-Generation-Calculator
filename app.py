import streamlit as st
import pandas as pd

# Define column names based on the expected structure
column_names = [
    "Index", "Timestamp", "T2m", "RH", "G(h)", "Gb(n)", "Gd(h)", 
    "IR(h)", "WS10m", "WD10m", "SP"
]

# Function to fetch and process PVGIS TMY data
def fetch_pvgis_tmy_data(file_path):
    try:
        data = pd.read_csv(file_path, skiprows=16, header=None, names=column_names)
        data['Timestamp'] = pd.to_datetime(data['Timestamp'], format='%Y%m%d:%H%M', errors='coerce')
        data = data.dropna(subset=['Timestamp'])  # Drop rows where 'Timestamp' could not be parsed
        data = data.set_index('Timestamp')
        return data
    except Exception as e:
        st.error(f"Error processing PVGIS data: {e}")
        return None

# Streamlit app interface
st.title("Facade Energy Generation Calculator")

st.write("""
This tool calculates the potential energy generation from a building facade based on PVGIS TMY data.
""")

# File uploader
uploaded_file = st.file_uploader("Choose a PVGIS TMY file")

if uploaded_file is not None:
    pvgis_tmy_data = fetch_pvgis_tmy_data(uploaded_file)
    if pvgis_tmy_data is not None:
        # Display the first few rows of the data
        st.write("**PVGIS TMY Data Head**")
        st.write(pvgis_tmy_data.head(20))

        # Perform energy generation calculations
        # Assume a simplified model where energy is proportional to irradiance

        # User inputs
        facade_azimuth = st.number_input("Facade Azimuth (degrees)", min_value=0, max_value=360, value=180)
        facade_area = st.number_input("Facade Area (mÂ²)", min_value=1.0, value=100.0)
        system_losses = st.number_input("System Losses (%)", min_value=0.0, max_value=100.0, value=15.0)

        # Calculate total irradiance on the facade (using direct normal irradiance as an example)
        poa_irradiance = pvgis_tmy_data["Gb(n)"].fillna(0).sum()  # Sum of direct normal irradiance

        # Calculate energy generated (Wh)
        energy_generated = poa_irradiance * facade_area / 1000  # Convert to kWh

        # Apply system losses
        effective_energy_generated = energy_generated * (1 - system_losses / 100)

        st.success(f"Total energy generated by the facade: {effective_energy_generated:.2f} kWh")

        # Provide feedback on data needs
        st.info("For more accurate calculations, ensure the irradiance data is accurate and up-to-date. Using site-specific data rather than generic data can improve accuracy.")
